@model DealSe.Areas.Admin.FormModels.StoreFormModel

<form method="post" role="form" asp-area="admin" asp-controller="Home" asp-action="EditProfile" enctype="multipart/form-data">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.AntiForgeryToken()
    @Html.HiddenFor(Model => Model.AddedDate)
    @Html.HiddenFor(Model => Model.StoreId)
    <div class="row">
        <div class="col-md-3">
            <div class="form-group">
                <label class="control-label" for="status">Country Name</label>
                @Html.DropDownList("CountryId", new SelectList(ViewBag.CountryList, "Value", "Text"), "Select Country", new { @class = "select2" })
                @Html.ValidationMessageFor(model => model.CountryId)

            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="control-label" for="status">State Name</label>
                @Html.DropDownList("StateId", new SelectList(ViewBag.StateList, "Value", "Text"), "Select State", new { @class = "select2" })
                @Html.ValidationMessageFor(model => model.StateId)
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="control-label" for="status">City Name</label>
                @Html.DropDownList("CityId", new SelectList(ViewBag.CityList, "Value", "Text"), "Select City", new { @class = "select2" })
                @Html.ValidationMessageFor(model => model.CityId)
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="control-label">Area Name</label>
                <label class="field-validation-error">*</label>
                @Html.DropDownList("AreaId", new SelectList(ViewBag.AreaList, "Value", "Text"), "Select Area", new { @class = "select2" })
                @Html.ValidationMessageFor(model => model.AreaId)
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label">Name</label>
                        <label class="field-validation-error">*</label>
                        @Html.TextBoxFor(model => model.Name, new { @class = "form-control htmlvalid trimmed txtOnly", @maxlength = "100" })
                        @Html.ValidationMessageFor(model => model.Name)
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label">Email</label>
                        <label class="field-validation-error">*</label>
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control htmlvalid trimmed", @maxlength = "100" })
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label">Owner Name</label>
                        <label class="field-validation-error">*</label>
                        @Html.TextBoxFor(model => model.OwnerName, new { @class = "form-control htmlvalid trimmed txtOnly", @maxlength = "100" })
                        @Html.ValidationMessageFor(model => model.OwnerName)
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label">Owner MobileNo</label>
                        <label class="field-validation-error">*</label>
                        @Html.TextBoxFor(model => model.OwnerMobileNo, new { @class = "form-control htmlvalid trimmed numeric", @maxlength = "10" })
                        @Html.ValidationMessageFor(model => model.OwnerMobileNo)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label">Store Number1</label>
                        @Html.TextBoxFor(model => model.MobileNo1, new { @class = "form-control htmlvalid trimmed numeric", @maxlength = "10" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label">Store Number2</label>
                        @Html.TextBoxFor(model => model.MobileNo2, new { @class = "form-control htmlvalid trimmed numeric", @maxlength = "10" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="col-md-12" style="margin-bottom:25px;">
                <div class="form-group">
                    <label class="control-label">Logo</label>
                    <div class="input-group">
                        <div class="fileinput fileinput-new" data-provides="fileinput">
                            <div class="fileinput-new thumbnail file" style="width: 150px; height: 150px;" data-trigger="fileinput">
                                @if (Model.Logo != null)
                                {
                                    <img src="/Upload/Admin/@Model.Logo" id="NewImage" />
                                }
                                else
                                {
                                    <img src="~/Admin/images/noimage.png" alt="noimage" />
                                }
                            </div>
                            <div class="fileinput-preview fileinput-exists thumbnail" style="max-width: 250px; max-height: 140px"></div>
                            <div>
                                <span class="btn btn-white btn-file">
                                    <span class="fileinput-new">Select Image</span>
                                    <span class="fileinput-exists">Change</span>
                                    <input type="file" name="file" id="imageUpload">
                                </span>
                                <a href="#" class="btn btn-orange fileinput-exists" data-dismiss="fileinput" id="btnRemove">Remove</a>
                            </div>
                            <span id="errormsgForimage"></span>
                        </div>
                        <div>
                            <span class="label label-important">NOTE!</span>
                            <span>Please upload image of 150 x 150 or higher pixels. For best results, the image pixels should be multiples of the minimum width and height.</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <div class="form-group">
                <label class="control-label">Registration Type</label>
                @Html.TextBoxFor(model => model.RegistrationType, new { @class = "form-control htmlvalid trimmed txtOnly", @maxlength = "100" })
                @Html.ValidationMessageFor(model => model.RegistrationType)
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="control-label">GoogleId</label>
                @Html.TextBoxFor(model => model.GoogleId, new { @class = "form-control htmlvalid trimmed" })
                @Html.ValidationMessageFor(model => model.GoogleId)
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label class="control-label">FacebookId</label>
                @Html.TextBoxFor(model => model.FacebookId, new { @class = "form-control htmlvalid trimmed" })
                @Html.ValidationMessageFor(model => model.FacebookId)
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <label class="control-label">About</label>
                @Html.TextAreaFor(model => model.About, new { @class = "form-control htmlvalid trimmed" })
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label class="control-label">Address</label>
                @Html.TextAreaFor(model => model.Address1, new { @class = "form-control htmlvalid trimmed" })
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="control-label">Latitude</label>
                @Html.TextBoxFor(model => model.Latitude, new { @class = "form-control htmlvalid trimmed decimal" })
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="control-label">Longitude</label>
                @Html.TextBoxFor(model => model.Longitude, new { @class = "form-control htmlvalid trimmed decimal" })
            </div>
        </div>
    </div>
    @if (Model.StoreId != 0 && !string.IsNullOrEmpty(Model.Address1))
    {
        <iframe width="100%"
                height="450"
                style="border:0"
                loading="lazy"
                allowfullscreen
                src="https://www.google.com/maps/embed/v1/place?key=@Model.GoogleMapAPIKey
    &q=@Model.Address1">
        </iframe>
    }
    <div class="row">
        <div class="col-md-3">
            <div class="form-group">
                <label class="control-label">Approved</label>
                <div class="form-group">
                    <div class="make-switch statusswitch" data-on="status" data-off="status" data-on-label="Yes" data-off-label="No">
                        @Html.CheckBoxFor(Model => Model.Approved, new { @checked = "checked" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group">
                <label class="control-label">Status</label>
                <div class="form-group">
                    <div class="make-switch statusswitch" data-on="status" data-off="status" data-on-label="Active" data-off-label="Inactive">
                        @Html.CheckBoxFor(Model => Model.Active, new { @checked = "checked" })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row center">
        <button type="submit" id="btnSubmit" class="btn btn-success">
            <i class="glyphicon glyphicon-save"></i>
            Save
        </button>
        <a href="@Url.Action("Index", "Store", new { Area = "Admin" })" class="btn btn-default">
            <i class="glyphicon glyphicon-remove"></i>
            Cancel
        </a>
    </div>
</form>
@await Html.PartialAsync("_FillCommonDropdownListScript")
<script src="~/Admin/assets/js/fileinput.js"></script>
<script type="text/javascript">
    $("#imageUpload").change(function () {
        //Get reference of FileUpload.
        var fileUpload = $("#imageUpload")[0];
        if (fileUpload.value != "") {
            //Check whether the file is valid Image.
            var regex = new RegExp(".jpg|.png|.jpeg");
            if (regex.test(fileUpload.value.toLowerCase())) {
                //Check whether HTML5 is supported.
                if (typeof (fileUpload.files) != "undefined") {
                    //Initiate the FileReader object.
                    var reader = new FileReader();
                    //Read the contents of Image File.
                    reader.readAsDataURL(fileUpload.files[0]);
                    reader.onload = function (e) {
                        //Initiate the JavaScript Image object.
                        var image = new Image();
                        //Set the Base64 string return from FileReader as source.
                        image.src = e.target.result;
                        image.onload = function () {
                            //Determine the Height and Width.
                            var height = this.height;
                            var width = this.width;
                            if (!(height >= 150 || width >= 150)) {
                                $.alert({
                                    title: 'Alert!',
                                    content: 'Oops! Please upload banner image of 150 x 150 or higher pixels. For best results, the image pixels should be multiples of the minimum width and height.',
                                });
                                $("#btnRemove").trigger("click");
                            }
                        };
                    }
                } else {
                    $.alert({
                        title: 'Alert!',
                        content: 'Oops! This browser does not support HTML5.',
                    });
                    $("#btnRemove").trigger("click");
                }
            }
            else {
                $.alert({
                    title: 'Alert!',
                    content: 'Oops! Please select a valid Image file.',
                });
                $("#btnRemove").trigger("click");
            }
        }
    })
</script>