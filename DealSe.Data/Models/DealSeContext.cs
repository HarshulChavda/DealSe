// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DealSe.Data.Models
{
    public partial class DealSeContext : DbContext
    {
        public DealSeContext()
        {
        }

        public DealSeContext(DbContextOptions<DealSeContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Admin> Admin { get; set; }
        public virtual DbSet<Area> Area { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplate { get; set; }
        public virtual DbSet<Offer> Offer { get; set; }
        public virtual DbSet<OfferBanner> OfferBanner { get; set; }
        public virtual DbSet<SiteSetting> SiteSetting { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<Store> Store { get; set; }
        public virtual DbSet<StoreSuggestedOffer> StoreSuggestedOffer { get; set; }
        public virtual DbSet<StoreTime> StoreTime { get; set; }
        public virtual DbSet<StoreType> StoreType { get; set; }
        public virtual DbSet<SuggestedOffer> SuggestedOffer { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserUsedOffer> UserUsedOffer { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Area>(entity =>
            {
                entity.HasOne(d => d.City)
                    .WithMany(p => p.Area)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Area_City");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.HasOne(d => d.State)
                    .WithMany(p => p.City)
                    .HasForeignKey(d => d.StateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_City_State");
            });

            modelBuilder.Entity<Offer>(entity =>
            {
                entity.HasOne(d => d.Store)
                    .WithMany(p => p.Offer)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Offer_Store");
            });

            modelBuilder.Entity<OfferBanner>(entity =>
            {
                entity.HasOne(d => d.Offer)
                    .WithMany(p => p.OfferBanner)
                    .HasForeignKey(d => d.OfferId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OfferBanner_Offer");
            });

            modelBuilder.Entity<SiteSetting>(entity =>
            {
                entity.Property(e => e.SiteSettingType).IsUnicode(false);
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.HasOne(d => d.Country)
                    .WithMany(p => p.State)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_State_Country");
            });

            modelBuilder.Entity<Store>(entity =>
            {
                entity.HasOne(d => d.Area)
                    .WithMany(p => p.Store)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Store_Area");

                entity.HasOne(d => d.StoreType)
                    .WithMany(p => p.Store)
                    .HasForeignKey(d => d.StoreTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Store_StoreType");
            });

            modelBuilder.Entity<StoreSuggestedOffer>(entity =>
            {
                entity.Property(e => e.OfferImage).IsFixedLength();

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.StoreSuggestedOffer)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreSuggestedOffer_Store");

                entity.HasOne(d => d.SuggestedOffer)
                    .WithMany(p => p.StoreSuggestedOffer)
                    .HasForeignKey(d => d.SuggestedOfferId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreSuggestedOffer_SuggestedOffer");
            });

            modelBuilder.Entity<StoreTime>(entity =>
            {
                entity.HasOne(d => d.Store)
                    .WithMany(p => p.StoreTime)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreTime_Store");
            });

            modelBuilder.Entity<SuggestedOffer>(entity =>
            {
                entity.Property(e => e.OfferImage).IsFixedLength();

                entity.HasOne(d => d.StoreType)
                    .WithMany(p => p.SuggestedOffer)
                    .HasForeignKey(d => d.StoreTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SuggestedOffer_StoreType");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasOne(d => d.Area)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Area");
            });

            modelBuilder.Entity<UserUsedOffer>(entity =>
            {
                entity.HasOne(d => d.Offer)
                    .WithMany(p => p.UserUsedOffer)
                    .HasForeignKey(d => d.OfferId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserUsedOffer_Offer");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserUsedOffer)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserUsedOffer_User");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}